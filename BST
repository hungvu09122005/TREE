#include <iostream>
#include <queue>

using namespace std;

struct Node {
    int key;
    Node* left;
    Node* right;
};

bool isEmpty (Node* root){
    if (root == nullptr){
        return true;
    }

    return false;
}

Node* createNode (int value){
    return new Node {value, nullptr, nullptr};
}

Node* find (Node* root, int value){
    while (root){
        if (root->key == value){
            return root;
        }

        if(root->key > value){
            root = root->left;
        } else {
            root = root->right;
        }
    }

    return nullptr;
}

void insert (Node* &Root, int value){
    Node* root = Root;
    while (root){
        if (root->key == value){
            return;
        }

        if(root->key > value){
            if(!root->left){
                root->left = createNode(value);
                return;
            }
            root = root->left;
        } else {
            if(!root->right){
                root->right = createNode(value);
                return;
            }
            root = root->right;
        }
    }
}

void deleteNode (Node* root, int value){
    root = find(root, value);
    Node* tmp = root;

    if(root == nullptr){
        return;
    }

    if (!root->left) {
        tmp = tmp->right;
    } else if (!root->right) {
        tmp = tmp->left;
    } else {
        tmp = tmp->right;
        while (tmp->left->left){
            tmp = tmp->left;
        }
    }

    root->key = tmp->left->key;
    tmp->left = nullptr;
}

void NLR(Node *root){
	if(root!=nullptr){
			if(root!=nullptr){
				cout<<root->key<<" ";
			}
			NLR(root->left);
			NLR(root->right);
	}
}

void deinitialize (Node* root){
    if (root == nullptr){
        deinitialize(root->left);
        deinitialize(root->right);
        delete root;
        root = nullptr;
    }
}

void tang (Node* root){
    queue <Node*> a;

    a.push(root);

    while(!a.empty()){
        cout << (a.front())->key << " ";

        if(a.front()->left != nullptr){
            a.push(a.front()->left);
        }

        if(a.front()->right != nullptr){
            a.push(a.front()->right);
        }

        a.pop();
    }
}

int main (){
    Node* root = nullptr;
    root = createNode(7);
    insert(root, 2);
    insert(root, 9);
    insert(root, 1);
    insert(root, 5);
    insert(root, 4);
    insert(root, 6);
    insert(root, 8);
    insert(root, 11);
    insert(root, 10);
    insert(root, 12);
    NLR(root);

    deleteNode(root, 7);

    NLR(root); cout << endl;
    tang(root);

    deinitialize(root);
    return 0;
}
